import { Injectable } from "@nestjs/common";
import { randomBytes, scrypt, timingSafeEqual } from "crypto";

@Injectable()
export class CryptoService {

  /**
   * Generate a hash from a text with a random salt
   */
  hash(text: string) {
    const salt = randomBytes(16).toString('hex')
    
    return new Promise<string>((resolve, reject) => {
      scrypt(text, salt, 64, (err, derivedKey) => {
        if (err) {
          reject(err)
          return
        }
        resolve(salt + ':' + derivedKey.toString('hex'))
      })
    })
  }

  /**
   * the text is clear text and the hash is the hash
   * generated by the hash function and is stored in the database
   * with the salt prepended to it (separated by a colon)
   */
  compare(text: string, hash: string) {
    const [salt, key] = hash.split(':')

    if (!salt || !key) {
      throw new Error('Invalid hash')
    }

    return new Promise<boolean>((resolve, reject) => {
      scrypt(text, salt, 64, (err, derivedKey) => {
        if (err) {
          reject(err)
          return
        }
        const keyBuffer = Buffer.from(key, 'hex')
        const match = timingSafeEqual(derivedKey, keyBuffer);

        resolve(match)
      })
    })

  }

}