// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CLIENT
  WORKER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

model EncryptionProfile {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // these keys are stored as a string and encrypted with the user's password or recovery key
  userKey     Bytes @unique // the key used to encrypt the user's data with his password
  recoveryKey Bytes @unique // the key used to encrypt the user's data with his recovery key

  // the user who owns this encryption key
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // all the fields below are common to both types of users (client and worker)
  // a profile is created after the user is verified, after that, he can complete his profile
  // when the user completes his profile (all Profile fields and all specific fields for his type)
  // the "completed" field in the user model will be set to true

  firstName String
  lastName  String

  // Address
  address        String
  addressDetails String?
  city           String
  zipCode        String
  country        String

  birthDate DateTime

  birthName  String?
  birthPlace String? // Required for "CLIENT" type

  gender Gender

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(uuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime?
  email                   String    @unique
  password                String?
  // For 2FA, phone or email
  verified                Boolean   @default(false)

  // It's not a "token" it's just a hashed string that contains the 6 digits code for 2FA
  verificationToken       String?
  lastVerificationRequest DateTime?

  phone String @unique // if the user wants to use 2FA with his phone

  // set to true when the user completes his profile and his typed profile (client or worker or admin)
  completed Boolean @default(false)

  refreshTokens RefreshToken[]

  encryptionProfile EncryptionProfile?

  // the profile is a one-to-one relationship
  // that contains the user's data for both client and worker
  // the profile is created after the user is verified
  profile Profile?

  // default to CLIENT because the signup process for 
  // a worker is different so every user is a client by default
  type UserType @default(CLIENT)

  // client and worker are one-to-one relationships
  // it's a "typed profile" because the user can be a client or a worker
  // client and worker will always be null for ADMIN users

  // if the user type is a client, he will have a client profile
  client Client?
  // if the user type is a worker, he will have a worker profile
  worker Worker?

  // if the user is an admin, he will have an admin profile
  admin Admin?
}

model RefreshToken {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  deletedAt DateTime?
  userId    String
  token     String    @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// This is a client aka a patient
model Client {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // extra fields for the client
  socialSecurityNumber String?
  mutualInsuranceNumber String?

  // the user who owns this client profile
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

// This is a doctor or someone who can create a teleconsultation
// and also invite a client (patient) to join the teleconsultation
// of course, he will be able to charge the client for the prestation
model Worker {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // extra fields for the worker
  // ...

  // the user who owns this client profile
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // extra fields for the admin
  permissions String[]

  // the user who owns this admin profile
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  creator   Admin?  @relation("createdAdmins", fields: [creatorId], references: [id])
  creatorId String?

  // the list of admins created by this admin
  admins Admin[] @relation("createdAdmins")
}

// Signup Token With Type
// This is a token that is sent to the user's email
// when someone invites him to join the plateform
// the token only contains the type of the user (worker or admin, never client)
// it only can be used once, when the user uses it, it will be deleted (soft delete)
// and when it's expired, a cron job will delete it
model Stwt {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  expiresAt DateTime?

  token String @unique

  consumerId String?
}
