// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CLIENT
  WORKER
}

model EncryptionProfile {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // these keys are stored as a string and encrypted with the user's password or recovery key
  userKey Bytes @unique // the key used to encrypt the user's data with his password
  recoveryKey Bytes @unique // the key used to encrypt the user's data with his recovery key

  // the user who owns this encryption key
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // all the fields below are common to both types of users (client and worker)
  // a profile is created after the user is verified, after that, he can complete his profile
  // when the user completes his profile (all Profile fields and all specific fields for his type)
  // the "completed" field in the user model will be set to true

  // ...

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  email     String    @unique
  password  String?
  firstName String
  lastName  String
  // For 2FA, phone or email
  verified  Boolean   @default(false)
  verificationToken String?
  lastVerificationRequest DateTime?

  phone     String   @unique // if the user wants to use 2FA with his phone

  // use this boolean to know if the user has completed his profile
  // in all cases (client or worker), the user must complete his profile
  // and all specific fields for his type (client or worker)
  completed Boolean @default(false)

  refreshTokens RefreshToken[]

  encryptionProfile EncryptionProfile?

  // the profile is a one-to-one relationship
  // that contains the user's data for both client and worker
  // the profile is created after the user is verified
  profile Profile?

  // default to CLIENT because the signup process for 
  // a worker is different so every user is a client by default
  type UserType @default(CLIENT)

  // if the user type is a client, he will have a client profile
  client Client?
  // if the user type is a worker, he will have a worker profile
  worker Worker?
}

model RefreshToken {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    String
  token     String    @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// This is a client aka a patient
model Client {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  // the user who owns this client profile
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

// This is a doctor or someone who can create a teleconsultation
// and also invite a client (patient) to join the teleconsultation
// of course, he will be able to charge the client for the prestation
model Worker {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // the user who owns this client profile
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}
